{"version":3,"sources":["components/Switch.js","../node_modules/memoize-one/dist/memoize-one.esm.js","views/SKU/AutoGeneration.js","views/SKU/SKUFormulation.js","views/SKU/index.js"],"names":["Switch","name","color","labelOn","labelOff","onChange","value","defaultValue","checked","console","log","className","defaultChecked","shape","size","safeIsNaN","Number","isNaN","areInputsEqual","newInputs","lastInputs","length","i","first","second","memoizeOne","resultFn","isEqual","lastThis","lastResult","lastArgs","calledOnce","newArgs","_i","arguments","this","apply","AutoGeneration","isModal","props","useState","loading","setLoading","autoSKUGeneration","setAutoSKUGeneration","useEffect","setLoader","getSKUSetting","then","json","response","ok","auto_generation","can_user_generate","setSKUAutoGeneration","variant","xs","id","e","target","htmlFor","sm","md","block","onClick","signal","AbortController","payload","updateSKUSetting","document","dispatchEvent","KeyboardEvent","keyCode","Toast","fire","icon","title","ToastMessage","defaultProps","connect","state","sku","settings","allIngredients","content","isInvolved","SKUFormulation","items","setItems","onDragEnd","result","destination","newItems","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","droppableId","provided","snapshot","droppableProps","ref","innerRef","style","isDraggingOver","background","padding","width","map","item","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","GRID","margin","borderRadius","ingredientID","findIndex","placeholder","SKU"],"mappings":"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","file":"static/js/20.f8db8e66.chunk.js","sourcesContent":["import React from 'react'\nimport { CSwitch } from '@coreui/react'\n\nconst Switch = ({\n  name,\n  color,\n  labelOn,\n  labelOff,\n  onChange,\n  value,\n  defaultValue,\n  checked\n}) => {\n  console.log(' value [switch] ', value)\n\n  return (\n    <div className=\"d-flex align-items-center\">\n      <span>\n        <b>{labelOff}</b>\n      </span>\n      &nbsp; &nbsp;\n      <CSwitch\n        onChange={onChange}\n        defaultChecked={defaultValue}\n        checked={checked}\n        value={value}\n        color={color}\n        name={name}\n        shape=\"pill\"\n        size=\"lg\"\n      />\n      &nbsp; &nbsp;\n      <span>\n        <b>{labelOn}</b>\n      </span>\n    </div>\n  )\n}\n\nexport default Switch\n","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n\nexport default memoizeOne;\n","import React, { useState, useEffect } from 'react'\n\nimport {\n  CCard,\n  CCardBody,\n  CRow,\n  CCol,\n  CFormGroup,\n  CInputCheckbox,\n  CLabel,\n  CSpinner,\n  CButton,\n} from '@coreui/react'\n\nimport { ToastMessage } from 'src/reusable/Toast/ToastMessage'\nimport Toast from 'src/reusable/Toast/Toast'\n\nimport { getSKUSetting, updateSKUSetting } from 'src/api/skuRequests'\nimport {\n  setLoader,\n  setSKUAutoGeneration,\n} from 'src/reducers/actions/settings.actions'\n\nimport { connect } from 'react-redux'\n\n// Simulate the ESC key for exiting modal.\nconst simulateEscape = () => {\n  document.dispatchEvent(new KeyboardEvent('keydown', { keyCode: 27 }))\n}\n\nconst AutoGeneration = ({ isModal, ...props }) => {\n  const [loading, setLoading] = useState(false)\n  const [autoSKUGeneration, setAutoSKUGeneration] = useState(false)\n\n  useEffect(() => {\n    props.setLoader(true)\n    getSKUSetting().then(({ json, response }) => {\n      if (response.ok) {\n        // Negated\n        const auto_generation = !json.can_user_generate\n        props.setSKUAutoGeneration(auto_generation) // From props\n        setAutoSKUGeneration(auto_generation) // From state\n      }\n      props.setLoader(false)\n    })\n  }, [])\n\n  const handleSKUValue = (e) => {\n    setAutoSKUGeneration(e.target.checked)\n  }\n\n  const submitPayload = () => {\n    setLoading(true)\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    const payload = {\n      can_user_generate: !autoSKUGeneration,\n    }\n    updateSKUSetting(signal, payload).then(({ json, response }) => {\n      if (response.ok) {\n        simulateEscape()\n        Toast.fire({\n          icon: 'success',\n          title: ToastMessage('success', 'SKU Settings saved.'),\n        })\n        console.log(json, response)\n        setLoading(false)\n        props.setSKUAutoGeneration(!json.can_user_generate)\n      } else {\n        Toast.fire({\n          icon: 'warning',\n          title: ToastMessage('warning', 'Error saving SKU Setting'),\n        })\n        console.log(json, response)\n        setLoading(false)\n      }\n    })\n  }\n\n  return (\n    <div>\n      <CCard className=\"addpro-custom-card sm-pd\">\n        <CCardBody>\n          <CFormGroup variant=\"checkbox\" className=\"checkbox\">\n            <CRow>\n              <CCol xs=\"4\">\n                <CInputCheckbox\n                  checked={autoSKUGeneration}\n                  id=\"autoskugeneration\"\n                  onChange={handleSKUValue}\n                />\n                <CLabel\n                  variant=\"checkbox\"\n                  className=\"form-check-label\"\n                  htmlFor=\"autoskugeneration\"\n                >\n                  Auto SKU Generation\n                </CLabel>\n              </CCol>\n            </CRow>\n            <p className=\"small\">\n              Auto generation wont allow user to input SKU in products.\n            </p>\n          </CFormGroup>\n          <CRow className=\"mt-4\">\n            <CCol sm=\"2\" md=\"2\">\n              <CButton block color=\"dark\" onClick={submitPayload}>\n                {loading ? <CSpinner color=\"secondary\" size=\"sm\" /> : 'Save'}\n              </CButton>\n            </CCol>\n          </CRow>\n        </CCardBody>\n      </CCard>\n    </div>\n  )\n}\n\nAutoGeneration.defaultProps = {\n  isModal: false,\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    sku: state.settings.sku,\n  }\n}\n\nexport default connect(mapStateToProps, { setSKUAutoGeneration, setLoader })(\n  AutoGeneration\n)\n","import { CCard, CCardBody } from '@coreui/react'\nimport React, { useState } from 'react'\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\nimport Switch from 'src/components/Switch'\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n  return result\n}\n\nconst GRID = 8\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: GRID * 2,\n  margin: `0 0 ${GRID}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'lightgrey',\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n  borderRadius: '10px',\n})\n\nconst allIngredients = [\n  {\n    id: '1',\n    content: 'Brand',\n    isInvolved: true,\n  },\n  {\n    id: '2',\n    content: 'Manufacturer',\n    isInvolved: true,\n  },\n]\n\nconst getListStyle = (isDraggingOver) => ({\n  background: 'white',\n  padding: GRID,\n  width: 250,\n})\n\nconst SKUFormulation = (props) => {\n  const [items, setItems] = useState(allIngredients)\n\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return\n    }\n\n    const newItems = reorder(\n      items,\n      result.source.index,\n      result.destination.index\n    )\n\n    setItems(newItems)\n  }\n\n  const handleIngredientInvolvement = (value, ingredientID) => {\n    const ingredientIndex = items.findIndex((item) => item.id === ingredientID)\n  }\n\n  return (\n    <CCard className=\"addpro-custom-card sm-pd\">\n      <CCardBody>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {items.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                        className=\"d-flex justify-content-between align-items-start\"\n                      >\n                        <p>{item.content}</p>\n                        <Switch\n                          color=\"lightgreen\"\n                          onChange={(value) =>\n                            handleIngredientInvolvement(value, item.id)\n                          }\n                        />\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </CCardBody>\n    </CCard>\n  )\n}\n\nexport default SKUFormulation\n","import React from 'react'\nimport AutoGeneration from './AutoGeneration'\nimport SKUFormulation from './SKUFormulation'\n\nconst SKU = () => {\n  return (\n    <div>\n      <h4 className=\"outside-card-title mb-4\">SKU</h4>\n      <AutoGeneration />\n      <h4 className=\"mt-5 mb-3 font-weight-bold\">SKU Formulation</h4>\n      <SKUFormulation />\n    </div>\n  )\n}\n\nexport default SKU\n"],"sourceRoot":""}