{"version":3,"sources":["assets/images/login.svg","views/pages/login/Login.js"],"names":["connect","state","message","user","loginError","loginUser","clearUserMessage","props","useState","email","setEmail","password","setPassword","loading","setLoading","useEffect","isEmpty","toast","className","style","height","backgroundColor","borderRadius","src","loginImage","alt","width","onSubmit","event","preventDefault","signal","AbortController","loginUserRequest","then","json","response","ok","key","id","first_name","last_name","localStorage","setItem","userID","token","removeItem","name","type","placeholder","autoComplete","onChange","e","target","value","required","xs","color","disabled","size","to"],"mappings":"yOAAe,MAA0B,kC,OCuJ1BA,uBANS,SAACC,GACvB,MAAO,CACLC,QAASD,EAAME,KAAKD,WAIgB,CACtCE,eACAC,cACAC,sBAHaN,EA3HD,SAACO,GACb,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACHC,YAAQT,EAAML,UACjBe,YAAMV,EAAML,SAEdK,EAAMD,qBACL,CAACC,EAAML,UA2BV,OACE,8BACE,cAAC,IAAD,CACEgB,UAAU,mDACVC,MAAO,CAAEC,OAAQ,SAFnB,SAIE,eAAC,IAAD,CACEF,UAAU,gCACVC,MAAO,CACLE,gBAAiB,QACjBC,aAAc,MAJlB,UAOE,qBAAKC,IAAKC,EAAYC,IAAI,QAAQN,MAAO,CAAEO,MAAO,WAClD,cAAC,IAAD,CACEP,MAAO,CACLO,MAAO,SAFX,SAKE,eAAC,IAAD,CAAOC,SA5CC,SAACC,GACjBA,EAAMC,iBACNf,GAAW,GACX,IACMgB,GADa,IAAIC,iBACGD,OAC1BE,YAAiBF,EAAQ,CAAErB,QAAOE,aAAYsB,MAAK,YAAyB,IAAtBC,EAAqB,EAArBA,KACpD,GADyE,EAAfC,SAC7CC,GAAI,CACf,IAAQC,EAAcH,EAAdG,IAAKlC,EAAS+B,EAAT/B,KACLmC,EAAqCnC,EAArCmC,GAAI7B,EAAiCN,EAAjCM,MAAO8B,EAA0BpC,EAA1BoC,WAAYC,EAAcrC,EAAdqC,UAC/BC,aAAaC,QAAQ,wBAAyBL,GAC9C9B,EAAMF,UAAU,CACdsC,OAAQL,EACR7B,QACAmC,MAAOP,EACPE,aACAC,mBAGFC,aAAaI,WAAW,yBACxBtC,EAAMH,aAERU,GAAW,OAuBL,UACE,uCACA,mBAAGI,UAAU,aAAb,qCACA,eAAC,IAAD,CAAaA,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAO4B,KAAK,iBAGhB,cAAC,IAAD,CACEC,KAAK,QACLC,YAAY,QACZC,aAAa,QACbC,SAAU,SAACC,GAAD,OAAOzC,EAASyC,EAAEC,OAAOC,QACnCA,MAAO5C,EACP6C,UAAU,OAGd,eAAC,IAAD,CAAapC,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAO4B,KAAK,wBAGhB,cAAC,IAAD,CACEC,KAAK,WACLC,YAAY,WACZE,SAAU,SAACC,GAAD,OAAOvC,EAAYuC,EAAEC,OAAOC,QACtCA,MAAO1C,EACP2C,UAAU,OAGd,eAAC,IAAD,WACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,cAAC,IAAD,CACEC,MAAM,UACNtC,UAAU,OACV6B,KAAK,SACLU,SAAU5C,EAJZ,SAMGA,EACC,cAAC,IAAD,CAAU2C,MAAM,YAAYE,KAAK,OAEjC,YAIN,cAAC,IAAD,CAAMH,GAAG,IAAIrC,UAAU,aAAvB,SACE,cAAC,OAAD,CAAMA,UAAU,OAAOyC,GAAG,mBAA1B","file":"static/js/23.6b180ce2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/login.9ff10445.svg\";","import CIcon from '@coreui/icons-react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport React, { useState, useEffect } from 'react'\nimport toast from 'react-hot-toast'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min'\nimport { loginUserRequest } from 'src/api/userRequests'\nimport {\n  clearUserMessage,\n  loginError,\n  loginUser,\n} from 'src/reducers/actions/user.actions'\nimport isEmpty from 'src/validations/isEmpty'\nimport loginImage from 'src/assets/images/login.svg'\n\nconst Login = (props) => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    if (!isEmpty(props.message)) {\n      toast(props.message)\n    }\n    props.clearUserMessage()\n  }, [props.message])\n\n  const loginUser = (event) => {\n    event.preventDefault()\n    setLoading(true)\n    const controller = new AbortController()\n    const signal = controller.signal\n    loginUserRequest(signal, { email, password }).then(({ json, response }) => {\n      if (response.ok) {\n        const { key, user } = json\n        const { id, email, first_name, last_name } = user\n        localStorage.setItem('productListingUserKey', key)\n        props.loginUser({\n          userID: id,\n          email,\n          token: key,\n          first_name,\n          last_name,\n        })\n      } else {\n        localStorage.removeItem('productListingUserKey')\n        props.loginError()\n      }\n      setLoading(false)\n    })\n  }\n\n  return (\n    <div>\n      <CContainer\n        className=\"d-flex justify-content-around align-items-center\"\n        style={{ height: '100vh' }}\n      >\n        <CCard\n          className=\"p-5 d-flex align-items-center\"\n          style={{\n            backgroundColor: 'white',\n            borderRadius: '3%',\n          }}\n        >\n          <img src={loginImage} alt=\"Login\" style={{ width: '25rem' }} />\n          <CCardBody\n            style={{\n              width: '40rem',\n            }}\n          >\n            <CForm onSubmit={loginUser}>\n              <h1>Login</h1>\n              <p className=\"text-muted\">Sign In to your account</p>\n              <CInputGroup className=\"mb-3\">\n                <CInputGroupPrepend>\n                  <CInputGroupText>\n                    <CIcon name=\"cil-user\" />\n                  </CInputGroupText>\n                </CInputGroupPrepend>\n                <CInput\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  autoComplete=\"email\"\n                  onChange={(e) => setEmail(e.target.value)}\n                  value={email}\n                  required={true}\n                />\n              </CInputGroup>\n              <CInputGroup className=\"mb-4\">\n                <CInputGroupPrepend>\n                  <CInputGroupText>\n                    <CIcon name=\"cil-lock-locked\" />\n                  </CInputGroupText>\n                </CInputGroupPrepend>\n                <CInput\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  onChange={(e) => setPassword(e.target.value)}\n                  value={password}\n                  required={true}\n                />\n              </CInputGroup>\n              <CRow>\n                <CCol xs=\"6\">\n                  <CButton\n                    color=\"primary\"\n                    className=\"px-4\"\n                    type=\"submit\"\n                    disabled={loading}\n                  >\n                    {loading ? (\n                      <CSpinner color=\"secondary\" size=\"sm\" />\n                    ) : (\n                      'Login'\n                    )}\n                  </CButton>\n                </CCol>\n                <CCol xs=\"6\" className=\"text-right\">\n                  <Link className=\"px-0\" to=\"/forgot-password\">\n                    Forgot password?\n                  </Link>\n                </CCol>\n              </CRow>\n            </CForm>\n          </CCardBody>\n        </CCard>\n      </CContainer>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    message: state.user.message,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  loginError,\n  loginUser,\n  clearUserMessage,\n})(Login)\n"],"sourceRoot":""}