{"version":3,"sources":["components/TextField.js","reusable/ErrorBody.js","components/Modal.js","assets/icons/edit.svg","assets/icons/trash.svg","assets/icons/view.svg","components/HorizontalRule.js","assets/icons/info.svg","views/Group/GroupRecord.js","views/Group/GroupContainer.js","validations/productGroup.validation.js","views/Group/AddGroup.js","views/Group/DeleteGroup.js","views/Group/EditGroupRecord.js","views/Group/ExistingGroupContainer.js","views/Group/ExpandableGroupContainer.js","views/Group/EditGroup.js","views/Group/GroupDataTable.js","views/Group/GroupHeader.js","views/Group/index.js"],"names":["TextField","name","label","placeholder","require","labelTag","type","onChange","value","error","disabled","helpText","secondaryLabel","secondaryLabelClick","onBlur","plaintext","className","htmlFor","style","float","cursor","onClick","id","required","defaultProps","ErrorBody","props","isEmpty","children","color","Modal","title","showModal","onClose","size","useState","show","setShow","useEffect","closeButton","HorizontalRule","width","height","backgroundColor","marginBottom","marginTop","connect","state","attributeLists","group","attributes","errors","setProductGroupAttributes","record","setName","choices","setChoices","choicesInput","setChoicesInput","nameError","setNameError","values","concatString","map","val","join","console","log","hasOwnProperty","_errors","split","trim","changedIndex","findIndex","option","newAttributeLists","changedRecord","md","e","target","filter","GroupContainer","handleAddGroupClick","newRecord","Math","floor","random","concat","edit","display","alignItems","marginRight","content","freeSet","cilPlus","src","infoIcon","alt","paddingRight","validateProductGroupCreation","productGroupData","productGroupsError","forEach","attributeOption","attributeOptionError","AddGroup","isModal","_setShowCreateForm","loading","setLoading","simulateEscape","document","dispatchEvent","KeyboardEvent","keyCode","clearProductGroupName","clearProductGroupAttributes","clearProductGroupError","signal","AbortController","_createAttribute","groupID","attr","datatype","length","payload","description","display_order","enum_group","attrPayload","createProductGroupAttribute","then","json","response","ok","attributeID","attributeFieldPayload","attributeset","field","associateGroupWithAttribute","setProductGroupName","Toast","fire","icon","ToastMessage","getAllProductGroups","updateProductGroups","key","Object","call","catch","_associateGroupWithAttribute","_createProductGroup","productGroupPayload","createProductGroup","sm","block","variant","setProductGroupError","item","message","setMessage","STATE","freeze","CANT_DELETE","NOT_DELETED","DELETING","DELETED","deletion","setDeletion","_deleteProductGroup","a","abortController","deleteProductGroup","groupName","existingAttributes","selectedGroupID","populateExistingGroupAttributes","isEdit","setIsEdit","setValues","delButtonLoading","setDelButtonLoading","saveButtonLoading","setSaveButtonLoading","getValues","__choices","borderRadius","newIdentifier","attributesPayload","updateProductGroupAttribute","refreshedListOfAttributes","find","fields","prevIsEdit","deleteProductGroupAttribute","newList","attribute","prevShow","draggable","productGroupID","groups","root","productGroups","setLoader","setSelectedGroupID","action","setAction","selectedItem","setSelectedItem","setShowModal","attributesAndPossibleValues","actions","ACTIONS","VIEW","viewIcon","EDIT","editIcon","DELETE","trashIcon","background","padding","DeleteGroup","items","_style","sorter","tableFilter","itemsPerPageSelect","itemsPerPage","hover","pagination","scopedSlots","possibleValues","GroupHeader","fontWeight","Group","showCreateForm","setShowCreateForm"],"mappings":"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","file":"static/js/15.03a42312.chunk.js","sourcesContent":["import React from 'react'\nimport { CFormGroup, CLabel, CInput } from '@coreui/react'\nimport ErrorBody from '../reusable/ErrorBody'\n\nconst TextField = ({\n  name,\n  label,\n  placeholder,\n  require,\n  labelTag,\n  type,\n  onChange,\n  value,\n  error,\n  disabled,\n  helpText,\n  secondaryLabel,\n  secondaryLabelClick,\n  onBlur,\n  plaintext,\n}) => {\n  return (\n    <CFormGroup className=\"mb-4\">\n      <CLabel htmlFor={name}>\n        {label}{' '}\n        {labelTag ? (\n          <small>\n            <code>{labelTag}</code>\n          </small>\n        ) : null}\n      </CLabel>\n      <span\n        className=\"font-weight-bold text-secondary\"\n        style={{ float: 'right', cursor: 'pointer' }}\n        onClick={() => {\n          secondaryLabelClick()\n        }}\n      >\n        {secondaryLabel}\n      </span>\n      <CInput\n        type={type}\n        id={name}\n        name={name}\n        onChange={onChange}\n        value={value}\n        placeholder={placeholder}\n        required={require ? true : false}\n        disabled={disabled}\n        onBlur={onBlur}\n        plaintext={plaintext}\n      />\n      <p className=\"small\">{helpText}</p>\n      <ErrorBody>{error}</ErrorBody>\n    </CFormGroup>\n  )\n}\n\nTextField.defaultProps = {\n  name: 'Name',\n  label: 'Label',\n  placeholder: 'Placeholder here',\n  require: false,\n  labelTag: false,\n  disabled: false,\n  helpText: '',\n  plaintext: false,\n}\n\nexport default TextField\n","import React from 'react'\n\nimport { CForm, CFormText } from '@coreui/react'\nimport isEmpty from '../validations/isEmpty'\n\nconst ErrorBody = (props) => {\n  if (isEmpty(props.children)) {\n    return <span></span>\n  }\n\n  return (\n    <>\n      <CForm>\n        <CFormText color=\"red\" style={{ color: 'red' }}>\n          {props.children}\n        </CFormText>\n      </CForm>\n    </>\n  )\n}\n\nexport default ErrorBody\n","import { CModal, CModalBody, CModalHeader, CModalTitle } from '@coreui/react'\nimport React, { useEffect, useState } from 'react'\n\nconst Modal = ({ title, showModal, onClose, size, ...props }) => {\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    setShow(true)\n  }, [showModal])\n\n  return (\n    <>\n      <CModal show={show} onClose={() => onClose(false)} size={size}>\n        <CModalHeader closeButton>\n          <CModalTitle>{title}</CModalTitle>\n        </CModalHeader>\n        <CModalBody>{props.children}</CModalBody>\n      </CModal>\n    </>\n  )\n}\n\nModal.defaultProps = {\n  size: 'lg',\n}\n\nexport default Modal\n","export default __webpack_public_path__ + \"static/media/edit.a2e87322.svg\";","export default __webpack_public_path__ + \"static/media/trash.f88bd880.svg\";","export default __webpack_public_path__ + \"static/media/view.ba2eff2b.svg\";","import React from 'react'\n\nconst HorizontalRule = ({ marginBottom, marginTop }) => {\n  const style = {\n    width: '100%',\n    height: 1,\n    backgroundColor: 'rgba(0,0,0,0.125)',\n    marginBottom: marginBottom,\n    marginTop: marginTop,\n  }\n  return (\n    <div>\n      <div style={style}></div>\n    </div>\n  )\n}\n\nHorizontalRule.defaultProps = {\n  marginBottom: '1.75rem',\n  marginTop: '1.75rem',\n}\n\nexport default HorizontalRule\n","export default __webpack_public_path__ + \"static/media/info.5733e5ae.svg\";","import React, { useState, useEffect } from 'react'\nimport { CCol, CRow, CButton } from '@coreui/react'\nimport { CIcon } from '@coreui/icons-react'\nimport TextField from 'src/components/TextField'\n\nimport { connect } from 'react-redux'\nimport { setProductGroupAttributes } from 'src/reducers/actions/index'\nimport isEmpty from 'src/validations/isEmpty'\n\nconst GroupRecord = ({ record, ...props }) => {\n  const [name, setName] = useState(null)\n  const [choices, setChoices] = useState([])\n  const [choicesInput, setChoicesInput] = useState('')\n  const [nameError, setNameError] = useState('')\n\n  const handleDelete = () => {\n    props.setProductGroupAttributes(\n      props.attributeLists.filter((option) => option.id !== record.id)\n    )\n  }\n\n  useEffect(() => {\n    if (!isEmpty(record.values)) {\n      const concatString = record.values.map((val) => val.value).join(',')\n      console.log('RECORD VALUES', concatString)\n      setChoicesInput(concatString)\n    } else {\n      setChoicesInput('')\n    }\n  }, [])\n\n  useEffect(() => {\n    if (props.errors && props.errors.hasOwnProperty(record.id)) {\n      const _errors = props.errors[record.id]\n      if (_errors && _errors.name) {\n        setNameError(_errors.name)\n      }\n    }\n  }, [props.errors])\n\n  useEffect(() => {\n    if (!isEmpty(choicesInput)) {\n      const values = choicesInput.split(',')\n      setChoices(\n        values.map((value) => {\n          return {\n            value: value.trim(),\n          }\n        })\n      )\n    } else {\n      setChoices([])\n    }\n  }, [choicesInput])\n\n  useEffect(() => {\n    let changedIndex = props.attributeLists.findIndex(\n      (option) => option.id === record.id\n    )\n    let newAttributeLists = [...props.attributeLists]\n    const changedRecord = {\n      id: record.id,\n      name,\n      values: choices,\n    }\n    newAttributeLists[changedIndex] = changedRecord\n    props.setProductGroupAttributes(newAttributeLists)\n  }, [name, choices])\n\n  return (\n    <CRow className=\"d-flex align-items-center\">\n      <CCol md=\"5\">\n        <TextField\n          label=\"Attribute\"\n          placeholder=\"Eg. Hard-disk\"\n          onChange={(e) => {\n            setName(e.target.value)\n          }}\n          value={record.name}\n          error={nameError}\n        />\n      </CCol>\n      <CCol md=\"6\">\n        <TextField\n          label=\"Possible values\"\n          placeholder=\"Eg. SSD, HDD\"\n          onChange={(e) => {\n            setChoicesInput(e.target.value)\n          }}\n          value={choicesInput}\n        />\n      </CCol>\n      <CCol md=\"1\">\n        <CButton onClick={handleDelete}>\n          <CIcon className=\"text-danger\" name=\"cil-x-circle\" />\n        </CButton>\n      </CCol>\n    </CRow>\n  )\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    attributeLists: state.group.attributes,\n    errors: state.group.errors,\n  }\n}\n\nexport default connect(mapStatetoProps, { setProductGroupAttributes })(\n  GroupRecord\n)\n","import { freeSet } from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport { CButton } from '@coreui/react'\nimport React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport infoIcon from 'src/assets/icons/info.svg'\nimport { setProductGroupAttributes } from 'src/reducers/actions/index'\nimport GroupRecord from './GroupRecord'\n\nconst GroupContainer = (props) => {\n  const handleAddGroupClick = () => {\n    // Handle the add warehouse button click.\n    const newRecordID = Math.floor(Math.random() * 100000000 + 1)\n    const newRecord = {\n      id: newRecordID,\n      name: null,\n      values: [],\n    }\n    props.setProductGroupAttributes(props.attributeLists.concat(newRecord))\n  }\n\n  useEffect(() => {\n    if (props.edit) {\n      handleAddGroupClick()\n    }\n  }, [])\n\n  return (\n    <div>\n      {props.attributeLists.map((record) => (\n        <GroupRecord record={record} edit={props.edit} />\n      ))}\n\n      <div className=\"d-flex justify-content-between align-items-center mb-3\">\n        <div>\n          <CButton\n            className=\"mb-0\"\n            style={{ display: 'flex', alignItems: 'center' }}\n            onClick={handleAddGroupClick}\n          >\n            <div style={{ marginRight: 14 }}>\n              <CIcon content={freeSet.cilPlus} size={'lg'} />\n            </div>\n            Add Attribute\n          </CButton>\n        </div>\n        <div>\n          <div\n            className=\"d-flex align-items-center\"\n            style={{ marginRight: '5rem' }}\n          >\n            <img src={infoIcon} alt=\"Info\" style={{ paddingRight: '0.5rem' }} />\n            <span>Add multiple keyword seperated by “,” comma</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nGroupContainer.defaultProps = {\n  edit: false,\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    attributeLists: state.group.attributes,\n  }\n}\n\nexport default connect(mapStatetoProps, { setProductGroupAttributes })(\n  GroupContainer\n)\n","import isEmpty from 'src/validations/isEmpty'\n\nconst validateProductGroupCreation = (productGroupData) => {\n  // For warehouses\n  let productGroupsError = {}\n  productGroupData.attributes.forEach((attributeOption) => {\n    let attributeOptionError = {}\n    if (isEmpty(attributeOption.name)) {\n      attributeOptionError.name = 'Please enter attribute name.'\n    }\n    if (!isEmpty(attributeOptionError)) {\n      productGroupsError[attributeOption.id] = attributeOptionError\n    }\n  })\n\n  if (isEmpty(productGroupData.name)) {\n    productGroupsError['name'] = 'Please provide product group name'\n  }\n  return productGroupsError\n}\n\nexport default validateProductGroupCreation\n","import { CButton, CCard, CCardBody, CCol, CRow, CSpinner } from '@coreui/react'\nimport React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  associateGroupWithAttribute,\n  createProductGroup,\n  createProductGroupAttribute,\n  getAllProductGroups,\n} from 'src/api/groupRequests'\nimport TextField from 'src/components/TextField'\nimport {\n  setProductGroupAttributes,\n  setProductGroupError,\n  setProductGroupName,\n  updateProductGroups,\n  clearProductGroupError,\n  clearProductGroupAttributes,\n  clearProductGroupName,\n} from 'src/reducers/actions/index'\nimport Toast from 'src/reusable/Toast/Toast'\nimport { ToastMessage } from 'src/reusable/Toast/ToastMessage'\nimport isEmpty from 'src/validations/isEmpty'\nimport validateProductGroupCreation from 'src/validations/productGroup.validation'\nimport GroupContainer from './GroupContainer'\n\nconst AddGroup = ({ isModal, _setShowCreateForm, ...props }) => {\n  const [loading, setLoading] = useState(false)\n\n  const group = props.group\n\n  // Simulate the ESC key for exiting modal.\n  const simulateEscape = (e) => {\n    document.dispatchEvent(new KeyboardEvent('keydown', { keyCode: 27 }))\n  }\n\n  // Clear attributes and errors for initial rendering.\n  useEffect(() => {\n    props.clearProductGroupName()\n    props.clearProductGroupAttributes()\n    props.clearProductGroupError()\n  }, [])\n\n  const handleProductGroupNameChange = (e) => {\n    props.setProductGroupName(e.target.value)\n  }\n\n  const productGroupPayload = () => {\n    if (isEmpty(group.attributes)) {\n      Toast.fire({\n        icon: 'warning',\n        title: ToastMessage('warning', 'At least one attribute is required.'),\n      })\n      return\n    }\n    return {\n      name: group.name,\n    }\n  }\n\n  const attributesPayload = () => {\n    return group.attributes.map((attr) => {\n      const name = attr.name\n      const values = attr.values\n\n      // Check the datatype\n      let datatype\n      if (isEmpty(values)) {\n        datatype = 'text'\n      } else {\n        if (values.filter((val) => val.value !== '').length === 0) {\n          datatype = 'text'\n        }\n        datatype = 'enum'\n      }\n\n      let payload = {\n        datatype: datatype,\n        name: name,\n        description: `${group.name} - ${attr.name}`, // Store attribute and group name\n        display_order: 1,\n      }\n      // If data type is enum , then prepare enum values.\n      if (datatype === 'enum') {\n        payload.enum_group = {\n          name: name,\n          values: values,\n        }\n      }\n      return payload\n    })\n  }\n\n  const abortController = new AbortController()\n  const signal = abortController.signal\n\n  const _associateGroupWithAttribute = (groupID, attributeID) => {\n    const attributeFieldPayload = {\n      attributeset: groupID,\n      field: attributeID,\n    }\n    associateGroupWithAttribute(signal, attributeFieldPayload)\n      .then(({ json, response }) => {\n        if (response.ok) {\n          console.log('Field is associated with group')\n          // Clear the field.\n          props.setProductGroupAttributes([])\n          // Clear the name.\n          props.setProductGroupName('')\n          setLoading(false)\n          Toast.fire({\n            icon: 'success',\n            title: ToastMessage('success', 'Product Group created.'),\n          })\n          simulateEscape()\n          getAllProductGroups().then(({ response, json }) => {\n            if (response.ok) {\n              props.updateProductGroups(json)\n            }\n          })\n        } else {\n          setLoading(false)\n          for (const key in json) {\n            if (Object.hasOwnProperty.call(json, key)) {\n              Toast.fire({\n                icon: 'warning',\n                title: ToastMessage('warning', json[key]),\n              })\n            }\n          }\n        }\n      })\n      .catch((e) => {\n        throw e\n      })\n  }\n\n  const _createAttribute = (groupID) => {\n    attributesPayload().forEach((attrPayload) => {\n      createProductGroupAttribute(signal, attrPayload)\n        .then(({ json, response }) => {\n          if (response.ok) {\n            console.log('Product Attribute Created')\n            const attributeID = json.id\n            _associateGroupWithAttribute(groupID, attributeID)\n          } else {\n            setLoading(false)\n            for (const key in json) {\n              if (Object.hasOwnProperty.call(json, key)) {\n                Toast.fire({\n                  icon: 'warning',\n                  title: ToastMessage('warning', json[key]),\n                })\n              }\n            }\n          }\n        })\n        .catch((e) => {\n          throw e\n        })\n    })\n  }\n\n  const _createProductGroup = () => {\n    const payload = productGroupPayload()\n    if (isEmpty(payload)) {\n      setLoading(false)\n      return\n    }\n    createProductGroup(signal, payload)\n      .then(({ json, response }) => {\n        if (response.ok) {\n          console.log('Product Group Created')\n          const groupID = json.id\n\n          // If product group gets created successfully,\n          // then create product attribute.\n          _createAttribute(groupID)\n        } else {\n          setLoading(false)\n          for (const key in json) {\n            if (Object.hasOwnProperty.call(json, key)) {\n              Toast.fire({\n                icon: 'warning',\n                title: ToastMessage('warning', json[key]),\n              })\n            }\n          }\n        }\n      })\n      .catch((e) => {\n        throw e\n      })\n  }\n\n  const submitPayload = () => {\n    const errors = validateProductGroupCreation(group)\n    props.setProductGroupError(errors)\n    if (isEmpty(errors)) {\n      setLoading(true)\n      _createProductGroup()\n    }\n  }\n\n  return (\n    <>\n      <CCard className={isModal ? 'px-3' : 'addpro-custom-card sm-pd mt-4'}>\n        {isModal ? null : (\n          <h4 className=\"outside-card-title mb-4 p-2\">Add Group</h4>\n        )}\n        <CCardBody>\n          <TextField\n            name=\"name\"\n            label=\"Group name\"\n            placeholder=\"Enter group name here\"\n            onChange={handleProductGroupNameChange}\n            value={props.group.name}\n            error={props.group.errors.name && props.group.errors.name}\n          />\n          <GroupContainer />\n          <CRow>\n            <CCol sm=\"2\" md=\"2\">\n              <CButton\n                block\n                variant=\"outline\"\n                color=\"dark\"\n                onClick={(e) => {\n                  simulateEscape(e)\n                  _setShowCreateForm && _setShowCreateForm(false)\n                }}\n              >\n                Cancel\n              </CButton>\n            </CCol>\n\n            <CCol sm=\"2\" md=\"2\">\n              <CButton\n                block\n                color=\"dark\"\n                onClick={submitPayload}\n                disabled={loading}\n              >\n                {loading ? <CSpinner color=\"secondary\" size=\"sm\" /> : 'Save'}\n              </CButton>\n            </CCol>\n          </CRow>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nAddGroup.defaultProps = {\n  isModal: false,\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    group: state.group,\n  }\n}\n\nexport default connect(mapStatetoProps, {\n  setProductGroupName,\n  updateProductGroups,\n  setProductGroupAttributes,\n  setProductGroupError,\n  clearProductGroupError,\n  clearProductGroupAttributes,\n  clearProductGroupName,\n})(AddGroup)\n","import React, { useState } from 'react'\nimport { CButton, CSpinner } from '@coreui/react'\n\nimport { connect } from 'react-redux'\nimport { updateProductGroups } from 'src/reducers/actions/index'\nimport { deleteProductGroup, getAllProductGroups } from 'src/api/groupRequests'\n\nimport Toast from 'src/reusable/Toast/Toast'\nimport { ToastMessage } from 'src/reusable/Toast/ToastMessage'\n\nconst DeleteProductGroup = ({ item, ...props }) => {\n  const [message, setMessage] = useState(\n    <p>\n      Are you sure want to delete <strong>{item.name}</strong> group ?\n    </p>\n  )\n\n  // State of deletions.\n  const STATE = Object.freeze({\n    CANT_DELETE: 'CANT_DELETE',\n    NOT_DELETED: 'NOT_DELETED',\n    DELETING: 'DELETING',\n    DELETED: 'DELETED',\n  })\n\n  // Simulate the ESC key for exiting modal.\n  const simulateEscape = () => {\n    document.dispatchEvent(new KeyboardEvent('keydown', { keyCode: 27 }))\n  }\n\n  const [deletion, setDeletion] = useState(STATE.NOT_DELETED)\n\n  const _deleteProductGroup = async (item) => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    setDeletion(STATE.DELETING)\n    setMessage(\n      <p>\n        Deleting <strong>{item.name}</strong> on progress\n      </p>\n    )\n    console.log('[DELETE] PRODUCT GROUP: ', item)\n    await deleteProductGroup(signal, item.id).then(({ json, response }) => {\n      console.log(json, response)\n      if (response.ok) {\n        setDeletion(STATE.DELETED)\n        setMessage(\n          <p>\n            <strong>{item.name}</strong> successfully deleted.\n          </p>\n        )\n        simulateEscape()\n        Toast.fire({\n          icon: 'success',\n          title: ToastMessage('success', 'Group deleted.'),\n        })\n      } else {\n        setDeletion(STATE.CANT_DELETE)\n        setMessage(\n          <p>\n            <strong>{item.name}</strong> group cant be deleted. The products are\n            populated with this group.\n          </p>\n        )\n      }\n    })\n\n    // Get a fresh list of brands.\n    getAllProductGroups().then(({ response, json }) => {\n      if (response.ok) {\n        props.updateProductGroups(json)\n      }\n    })\n  }\n\n  return (\n    <div className=\"text-center\">\n      {message}\n      {deletion == STATE.DELETED || deletion == STATE.CANT_DELETE ? null : (\n        <CButton\n          color=\"danger\"\n          disabled={deletion == STATE.DELETING}\n          onClick={() => {\n            _deleteProductGroup(item)\n          }}\n        >\n          {deletion == STATE.DELETING ? (\n            <CSpinner color=\"secondary\" size=\"sm\" />\n          ) : deletion == STATE.NOT_DELETED ? (\n            'Delete'\n          ) : null}\n        </CButton>\n      )}\n    </div>\n  )\n}\n\nexport default connect(null, { updateProductGroups })(DeleteProductGroup)\n","import { CCol, CRow, CButton, CSpinner } from '@coreui/react'\nimport { CIcon } from '@coreui/icons-react'\nimport React, { useState, useEffect } from 'react'\nimport {\n  deleteProductGroupAttribute,\n  getAllProductGroups,\n  updateProductGroupAttribute,\n} from 'src/api/groupRequests'\n\nimport TextField from 'src/components/TextField'\nimport isEmpty from 'src/validations/isEmpty'\n\nimport { connect } from 'react-redux'\nimport {\n  populateExistingGroupAttributes,\n  updateProductGroups,\n} from 'src/reducers/actions/index'\n\nimport Toast from 'src/reusable/Toast/Toast'\nimport { ToastMessage } from 'src/reusable/Toast/ToastMessage'\n\nconst EditGroupRecord = ({ record, ...props }) => {\n  const [isEdit, setIsEdit] = useState(false)\n  const [name, setName] = useState('')\n  const [values, setValues] = useState('')\n  const [choices, setChoices] = useState([])\n  const [delButtonLoading, setDelButtonLoading] = useState(false)\n  const [saveButtonLoading, setSaveButtonLoading] = useState(false)\n\n  const handleEditChange = (e) => {\n    setIsEdit((prevIsEdit) => !prevIsEdit)\n  }\n\n  // Simulate the ESC key for exiting modal.\n  const simulateEscape = () => {\n    document.dispatchEvent(new KeyboardEvent('keydown', { keyCode: 27 }))\n  }\n\n  const getValues = () => {\n    let values\n    if (record.datatype === 'text') {\n      values = []\n    } else if (record.datatype === 'enum') {\n      values = record.enum_group.values\n    }\n    return values.map((value) => value.value).join(',')\n  }\n\n  useEffect(() => {\n    // When user clicks cancel, the data needs to be cleared.\n    if (!isEdit) {\n      setName(record.name)\n      setValues(getValues())\n      if (record.datatype === 'enum') {\n        setChoices(record.enum_group.values)\n      }\n    }\n  }, [isEdit])\n\n  const handleValueChange = (e) => {\n    // Create value payload for saving.\n    const value = e.target.value\n    setValues(value)\n    const __choices = value\n      .split(',')\n      .filter((val) => !isEmpty(val.trim()))\n      .map((val) => {\n        return {\n          value: val.trim(),\n        }\n      })\n    setChoices(__choices)\n  }\n\n  useEffect(() => {\n    setName(record.name)\n    setValues(getValues())\n  }, [])\n\n  const attributesPayload = () => {\n    const values = choices\n\n    // Check the datatype\n    let datatype\n    if (isEmpty(values)) {\n      datatype = 'text'\n    } else {\n      if (values.filter((val) => val.value !== '').length === 0) {\n        datatype = 'text'\n      }\n      datatype = 'enum'\n    }\n\n    const newIdentifier = `${props.groupName} - ${name}`\n    let payload = {\n      datatype: datatype,\n      name: name,\n      description: newIdentifier, // Only name to store what was input by user.\n      display_order: 1,\n    }\n    // If data type is enum , then prepare enum values.\n    if (datatype === 'enum') {\n      payload.enum_group = {\n        name: newIdentifier,\n        values: values,\n      }\n    }\n    return payload\n  }\n\n  const submitPayload = () => {\n    // Write logic for updating attribute.\n    const payload = attributesPayload()\n    const controller = new AbortController()\n    const signal = controller.signal\n    setSaveButtonLoading(true)\n    updateProductGroupAttribute(signal, record.id, payload).then(\n      ({ json, response }) => {\n        if (response.ok) {\n          Toast.fire({\n            icon: 'success',\n            title: ToastMessage('success', 'Updated successfully.'),\n          })\n          setSaveButtonLoading(false)\n          getAllProductGroups(signal).then(({ json, response }) => {\n            if (response.ok) {\n              props.updateProductGroups(json)\n              // Update the existing group attributes.\n              const refreshedListOfAttributes = json.find(\n                (item) => item.id === props.selectedGroupID\n              ).fields\n              props.populateExistingGroupAttributes(refreshedListOfAttributes)\n              setIsEdit(false)\n            }\n          })\n        } else {\n          Toast.fire({\n            icon: 'warning',\n            title: ToastMessage('warning', json.message),\n          })\n          setSaveButtonLoading(false)\n        }\n      }\n    )\n  }\n\n  const handleDelete = () => {\n    const controller = new AbortController()\n    const signal = controller.signal\n    setDelButtonLoading(true)\n    deleteProductGroupAttribute(signal, record.id).then(\n      ({ json, response }) => {\n        if (response.ok) {\n          simulateEscape()\n          Toast.fire({\n            icon: 'success',\n            title: ToastMessage('success', json.message),\n          })\n          // Remove the attribute from the state.\n          const newList = props.existingAttributes.filter(\n            (attr) => attr.id !== record.id\n          )\n          // Populate existing attributes again.\n          props.populateExistingGroupAttributes(newList)\n          getAllProductGroups(signal).then(({ json, response }) => {\n            if (response.ok) {\n              props.updateProductGroups(json)\n            }\n          })\n        } else {\n          Toast.fire({\n            icon: 'warning',\n            title: ToastMessage('warning', json.message),\n          })\n        }\n        setDelButtonLoading(false)\n      }\n    )\n  }\n\n  return (\n    <CRow className=\"d-flex align-items-center\">\n      <CCol md={isEdit ? '3' : '4'}>\n        <TextField\n          name=\"attributeName\"\n          label=\"Name\"\n          placeholder=\"Attribute Name\"\n          value={name}\n          plaintext={!isEdit}\n          disabled={!isEdit}\n          onChange={(e) => {\n            setName(e.target.value)\n          }}\n        />\n      </CCol>\n      <CCol md={isEdit ? '4' : '5'}>\n        <TextField\n          name=\"attributeName\"\n          label=\"Possible Values\"\n          placeholder={\n            isEmpty(getValues()) ? 'Takes input from User' : 'Possible Values'\n          }\n          plaintext={!isEdit}\n          disabled={!isEdit}\n          value={values}\n          onChange={handleValueChange}\n        />\n      </CCol>\n      {isEdit ? (\n        <CCol md=\"2\">\n          <CButton\n            color=\"dark\"\n            block={true}\n            variant={isEdit ? '' : 'outline'}\n            style={{ borderRadius: '8%' }}\n            onClick={submitPayload}\n            disabled={saveButtonLoading}\n          >\n            {saveButtonLoading ? (\n              <CSpinner color=\"secondary\" size=\"sm\" />\n            ) : (\n              'Update'\n            )}\n          </CButton>\n        </CCol>\n      ) : null}\n      <CCol md=\"2\">\n        <CButton\n          color=\"dark\"\n          block={true}\n          onClick={handleEditChange}\n          variant=\"outline\"\n          style={{ borderRadius: '8%' }}\n        >\n          {isEdit ? 'Cancel' : 'Edit'}\n        </CButton>\n      </CCol>\n      <CCol>\n        <CCol md=\"1\">\n          <CButton onClick={handleDelete} disabled={delButtonLoading}>\n            {delButtonLoading ? (\n              <CSpinner color=\"secondary\" size=\"sm\" />\n            ) : (\n              <CIcon className=\"text-danger\" name=\"cil-x-circle\" />\n            )}\n          </CButton>\n        </CCol>\n      </CCol>\n    </CRow>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    groupName: state.group.name,\n    existingAttributes: state.group.existingAttributes,\n    selectedGroupID: state.group.selectedGroupID,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateProductGroups,\n  populateExistingGroupAttributes,\n})(EditGroupRecord)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport EditGroupRecord from './EditGroupRecord'\n\nconst ExistingGroupContainer = ({ attributes }) => {\n  return (\n    <div className=\"mt-5\">\n      <h5 className=\"mb-4\">Existing Attributes</h5>\n      {attributes.map((attribute) => (\n        <EditGroupRecord record={attribute} />\n      ))}\n    </div>\n  )\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    attributes: state.group.existingAttributes,\n  }\n}\n\nexport default connect(mapStatetoProps, null)(ExistingGroupContainer)\n","import { CButton, CCol, CRow, CSpinner } from '@coreui/react'\nimport React, { useState } from 'react'\nimport HorizontalRule from 'src/components/HorizontalRule'\nimport GroupContainer from './GroupContainer'\nimport {\n  associateGroupWithAttribute,\n  createProductGroupAttribute,\n  getAllProductGroups,\n} from 'src/api/groupRequests'\n\nimport {\n  setProductGroupAttributes,\n  setProductGroupError,\n  setProductGroupName,\n  updateProductGroups,\n  populateExistingGroupAttributes,\n} from 'src/reducers/actions/index'\n\nimport Toast from 'src/reusable/Toast/Toast'\nimport { ToastMessage } from 'src/reusable/Toast/ToastMessage'\nimport isEmpty from 'src/validations/isEmpty'\nimport { connect } from 'react-redux'\n\nconst ExpandableGroupContainer = (props) => {\n  const [show, setShow] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  const toggleShow = (e) => {\n    setShow((prevShow) => !prevShow)\n  }\n\n  const group = props.group\n\n  const abortController = new AbortController()\n  const signal = abortController.signal\n\n  const attributesPayload = () => {\n    return group.attributes.map((attr) => {\n      const name = attr.name\n      const values = attr.values\n\n      // Check the datatype\n      let datatype\n      if (isEmpty(values)) {\n        datatype = 'text'\n      } else {\n        if (values.filter((val) => val.value !== '').length === 0) {\n          datatype = 'text'\n        }\n        datatype = 'enum'\n      }\n\n      let payload = {\n        datatype: datatype,\n        name: name,\n        description: `${group.name} - ${attr.name}`, // Store attribute and group name\n        display_order: 1,\n      }\n      // If data type is enum , then prepare enum values.\n      if (datatype === 'enum') {\n        payload.enum_group = {\n          name: name,\n          values: values,\n        }\n      }\n      return payload\n    })\n  }\n\n  const _associateGroupWithAttribute = (groupID, attributeID) => {\n    const attributeFieldPayload = {\n      attributeset: groupID,\n      field: attributeID,\n    }\n\n    associateGroupWithAttribute(signal, attributeFieldPayload)\n      .then(({ json, response }) => {\n        if (response.ok) {\n          console.log('Field is associated with group')\n          // Clear the field.\n          props.setProductGroupAttributes([])\n          setLoading(false)\n          Toast.fire({\n            icon: 'success',\n            title: ToastMessage('success', 'Product Group created.'),\n          })\n          getAllProductGroups().then(({ response, json }) => {\n            if (response.ok) {\n              props.updateProductGroups(json)\n              // Update the existing group attributes.\n              const refreshedListOfAttributes = json.find(\n                (item) => item.id === groupID\n              ).fields\n              props.populateExistingGroupAttributes(refreshedListOfAttributes)\n            }\n          })\n        } else {\n          setLoading(false)\n          for (const key in json) {\n            if (Object.hasOwnProperty.call(json, key)) {\n              Toast.fire({\n                icon: 'warning',\n                title: ToastMessage('warning', json[key]),\n              })\n            }\n          }\n        }\n      })\n      .catch((e) => {\n        throw e\n      })\n  }\n\n  const _createAttribute = (groupID) => {\n    attributesPayload().forEach((attrPayload) => {\n      createProductGroupAttribute(signal, attrPayload)\n        .then(({ json, response }) => {\n          if (response.ok) {\n            console.log('Product Attribute Created')\n            const attributeID = json.id\n            _associateGroupWithAttribute(groupID, attributeID)\n          } else {\n            setLoading(false)\n            for (const key in json) {\n              if (Object.hasOwnProperty.call(json, key)) {\n                Toast.fire({\n                  icon: 'warning',\n                  title: ToastMessage('warning', json[key]),\n                })\n              }\n            }\n          }\n        })\n        .catch((e) => {\n          throw e\n        })\n    })\n  }\n\n  const _updateProductGroup = (e) => {\n    const productGroupID = props.group.selectedGroupID\n    setLoading(true)\n    _createAttribute(productGroupID)\n  }\n\n  return (\n    <div>\n      <HorizontalRule />\n      <div className=\"d-flex justify-content-end\">\n        <CButton onClick={toggleShow} draggable={true}>\n          {show ? 'Collapse ⬆' : 'Expand to add attributes ⬇'}\n        </CButton>\n      </div>\n      {show ? (\n        <div>\n          <GroupContainer edit={true} />\n          <CRow>\n            <CCol sm=\"2\" md=\"2\">\n              <CButton block variant=\"outline\" color=\"dark\">\n                Cancel\n              </CButton>\n            </CCol>\n            <CCol sm=\"2\" md=\"2\">\n              <CButton\n                block\n                color=\"dark\"\n                onClick={_updateProductGroup}\n                disabled={loading}\n              >\n                {loading ? <CSpinner color=\"secondary\" size=\"sm\" /> : 'Save'}\n              </CButton>\n            </CCol>\n          </CRow>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    group: state.group,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  setProductGroupAttributes,\n  setProductGroupError,\n  setProductGroupName,\n  updateProductGroups,\n  populateExistingGroupAttributes,\n})(ExpandableGroupContainer)\n","import { CCard, CCardBody } from '@coreui/react'\nimport React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport TextField from 'src/components/TextField'\nimport {\n  populateExistingGroupAttributes,\n  setProductGroupAttributes,\n  setProductGroupName,\n  updateProductGroups,\n} from 'src/reducers/actions/index'\nimport isEmpty from 'src/validations/isEmpty'\nimport ExistingGroupContainer from './ExistingGroupContainer'\nimport ExpandableGroupContainer from './ExpandableGroupContainer'\n\nconst EditGroup = ({ edit, item, isModal, ...props }) => {\n  useEffect(() => {\n    if (edit && !isEmpty(item)) {\n      console.log('SELECTED ITEM', item)\n      if (!isEmpty(item.fields)) {\n        props.populateExistingGroupAttributes(item.fields)\n        props.setProductGroupName(item.name)\n      }\n    }\n  }, [item])\n\n  return (\n    <div>\n      <CCard className={isModal ? 'px-3' : 'addpro-custom-card sm-pd mt-4'}>\n        {isModal ? null : (\n          <h4 className=\"outside-card-title mb-4 p-2\">Add Group</h4>\n        )}\n        <CCardBody>\n          <TextField\n            name=\"name\"\n            label=\"Group name\"\n            placeholder=\"Enter group name here\"\n            value={props.group.name}\n            disabled={true}\n            plaintext={true}\n          />\n          <ExistingGroupContainer />\n\n          <ExpandableGroupContainer />\n        </CCardBody>\n      </CCard>\n    </div>\n  )\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    group: state.group,\n  }\n}\n\nexport default connect(mapStatetoProps, {\n  setProductGroupName,\n  updateProductGroups,\n  setProductGroupAttributes,\n  populateExistingGroupAttributes,\n})(EditGroup)\n","import { CButton, CCard, CCardBody, CDataTable } from '@coreui/react'\nimport React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { getAllProductGroups } from 'src/api/groupRequests'\nimport editIcon from 'src/assets/icons/edit.svg'\nimport infoIcon from 'src/assets/icons/info.svg'\nimport trashIcon from 'src/assets/icons/trash.svg'\nimport viewIcon from 'src/assets/icons/view.svg'\nimport { ACTIONS } from 'src/constants'\nimport {\n  clearProductGroupAttributes,\n  setSelectedGroupID,\n  updateProductGroups,\n} from 'src/reducers/actions/index'\nimport { setLoader } from 'src/reducers/actions/settings.actions'\nimport Modal from '../../components/Modal'\nimport DeleteGroup from './DeleteGroup'\nimport EditGroup from './EditGroup'\n\nconst GroupDataTable = (props) => {\n  useEffect(() => {\n    props.setLoader(true)\n    getAllProductGroups().then(({ response, json }) => {\n      if (response.ok) {\n        props.updateProductGroups(json)\n      }\n      props.setLoader(false)\n    })\n  }, [])\n\n  const fields = [\n    { key: 'id', _style: { width: '3%' }, filter: false },\n    { label: 'Product Group', key: 'name', _style: { width: '20%' } },\n    {\n      key: 'possibleValues',\n      label: 'Attributes & Possible values',\n      _style: { width: '30%' },\n    },\n    { key: 'action', _style: { width: '20%' }, sorter: false, filter: false },\n  ]\n\n  const [action, setAction] = useState('')\n  const [selectedItem, setSelectedItem] = useState({})\n  const [showModal, setShowModal] = useState(false)\n\n  const attributes = (item) => {\n    return item.fields.length > 0 ? (\n      <span>{item.fields.map((attr) => attr.name).join(', ')}</span>\n    ) : (\n      <span className=\"text-warning\">No attributes set yet. </span>\n    )\n  }\n\n  const attributesAndPossibleValues = (item) => {\n    return item.fields.length > 0 ? (\n      item.fields.map((attr) => (\n        <tr>\n          <td className=\"font-weight-bold\" style={{ width: '50%' }}>\n            {attr.name}\n          </td>\n          {attr.datatype === 'enum' ? (\n            attr.enum_group.values && (\n              <td>\n                {attr.enum_group.values.map((attr) => attr.value).join(', ')}\n              </td>\n            )\n          ) : (\n            <td>Takes input from user.</td>\n          )}\n        </tr>\n      ))\n    ) : (\n      <span className=\"text-warning\">Please set attributes first.</span>\n    )\n  }\n\n  const actions = (item) => (\n    <>\n      <CButton\n        onClick={() => {\n          props.clearProductGroupAttributes()\n          setSelectedItem(item)\n          setAction(ACTIONS.VIEW)\n          setShowModal(true)\n        }}\n        title=\"View Group\"\n      >\n        <img src={viewIcon} alt=\"View\" />\n      </CButton>\n      <CButton\n        onClick={() => {\n          props.clearProductGroupAttributes()\n          setSelectedItem(item)\n          props.setSelectedGroupID(item.id)\n          setAction(ACTIONS.EDIT)\n          setShowModal(true)\n        }}\n        title=\"Edit Group\"\n      >\n        <img src={editIcon} alt=\"Edit\" />\n      </CButton>\n      <CButton\n        onClick={() => {\n          setSelectedItem(item)\n          setAction(ACTIONS.DELETE)\n          setShowModal(true)\n        }}\n        title=\"Delete Group\"\n      >\n        <img src={trashIcon} alt=\"Delete\" />\n      </CButton>\n    </>\n  )\n\n  return (\n    <CCard>\n      <CCardBody\n        style={{ background: 'white', borderRadius: '10px', padding: '2rem' }}\n      >\n        {showModal ? (\n          <Modal\n            showModal={showModal}\n            title={`${action} ${selectedItem.name}`}\n            onClose={setShowModal}\n            size={action === 'EDIT' ? 'xl' : 'lg'}\n          >\n            {action === 'DELETE' ? <DeleteGroup item={selectedItem} /> : null}\n            {action === 'EDIT' ? (\n              <EditGroup item={selectedItem} isModal={true} edit={true} />\n            ) : null}\n          </Modal>\n        ) : null}\n        <CDataTable\n          items={props.groups}\n          fields={fields}\n          tableFilter\n          itemsPerPageSelect\n          itemsPerPage={10}\n          hover\n          sorter\n          pagination\n          scopedSlots={{\n            attributes: (item) => <td>{attributes(item)}</td>,\n            possibleValues: (item) => (\n              <table style={{ width: '100%' }} className=\"table\">\n                {attributesAndPossibleValues(item)}\n              </table>\n            ),\n            action: (item) => <td>{actions(item)}</td>,\n          }}\n        />\n\n        <div className=\"d-flex align-items-center\">\n          <img src={infoIcon} alt=\"Info\" style={{ paddingRight: '0.5rem' }} />\n          <span>\n            Editing and deleting are restricted if products are populated for\n            those product groups.\n          </span>\n        </div>\n      </CCardBody>\n    </CCard>\n  )\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    groups: state.root.productGroups,\n  }\n}\n\nexport default connect(mapStatetoProps, {\n  updateProductGroups,\n  setLoader,\n  clearProductGroupAttributes,\n  setSelectedGroupID,\n})(GroupDataTable)\n","import React from 'react'\nimport { CCol, CButton } from '@coreui/react'\n\nconst GroupHeader = ({ _setShowCreateForm }) => {\n  return (\n    <div>\n      <div className=\"d-flex justify-content-between align-items-start\">\n        <h4 className=\"outside-card-title mb-4 mr-auto\">Group</h4>\n        <CCol md=\"2\">\n          <CButton\n            block\n            color=\"warning\"\n            onClick={() => {\n              _setShowCreateForm(true)\n            }}\n          >\n            <span style={{ color: '#fff', fontWeight: 600 }}>\n              + &nbsp;Add Group\n            </span>\n          </CButton>\n        </CCol>\n      </div>\n    </div>\n  )\n}\n\nexport default GroupHeader\n","import React, { useState } from 'react'\nimport AddGroup from './AddGroup'\nimport GroupDataTable from './GroupDataTable'\nimport GroupHeader from './GroupHeader'\n\nconst Group = () => {\n  const [showCreateForm, setShowCreateForm] = useState(false)\n  return (\n    <>\n      <GroupHeader _setShowCreateForm={setShowCreateForm} />\n      {showCreateForm ? (\n        <AddGroup isModal={false} _setShowCreateForm={setShowCreateForm} />\n      ) : null}\n      <h4 className=\"mt-5 mb-3 font-weight-bold\">All Product Groups</h4>\n      <GroupDataTable />\n    </>\n  )\n}\n\nexport default Group\n"],"sourceRoot":""}