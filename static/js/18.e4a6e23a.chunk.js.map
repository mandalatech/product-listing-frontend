{"version":3,"sources":["components/TextField.js","reusable/ErrorBody.js","components/Modal.js","assets/icons/edit.svg","assets/icons/trash.svg","assets/icons/settings.svg","assets/icons/logs.svg","assets/icons/password.svg","assets/images/profileAvatar.svg","views/Profile/EditProfile.js","assets/icons/clock.svg","assets/icons/create.svg","views/Profile/Logs.js","views/Profile/ChangePassword.js","views/Profile/ProfileHeader.js","views/Profile/index.js"],"names":["TextField","name","label","placeholder","require","labelTag","type","onChange","value","error","disabled","helpText","secondaryLabel","secondaryLabelClick","onBlur","plaintext","className","htmlFor","style","float","cursor","onClick","id","required","defaultProps","ErrorBody","props","isEmpty","children","color","Modal","title","showModal","onClose","size","useState","show","setShow","useEffect","closeButton","EditProfile","isModal","fn","ln","em","firstName","setFirstName","lastName","setLastName","email","setEmail","loading","setLoading","simulateEscape","document","dispatchEvent","KeyboardEvent","keyCode","onSubmit","e","preventDefault","payload","trim","first_name","last_name","toast","token","updateUserDetails","AbortController","signal","then","json","response","ok","updateUserDetailsState","success","xs","md","target","sm","block","variant","connect","state","user","setUserLogsResponse","userLogs","setUserLogs","getActionIcon","action_flag","createIcon","editIcon","trashIcon","getUserLogs","count","next","previous","results","overflowY","overflowX","map","log","src","alt","height","str_repr","clockIcon","humanized_time","passwordOne","setPasswordOne","passwordTwo","setPasswordTwo","backgroundColor","width","changePasswordRequest","new_password1","new_password2","key","forEach","err","ProfileHeader","showEditProfileModal","setShowEditProfileModal","showLogsModal","setShowLogsModal","showChangePasswordModal","setShowChangePasswordModal","marginBottom","settingsIcon","logsIcon","passwordIcon","class","userAvatarImage","setLoader","getUserDetails"],"mappings":"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","file":"static/js/18.e4a6e23a.chunk.js","sourcesContent":["import React from 'react'\nimport { CFormGroup, CLabel, CInput } from '@coreui/react'\nimport ErrorBody from '../reusable/ErrorBody'\n\nconst TextField = ({\n  name,\n  label,\n  placeholder,\n  require,\n  labelTag,\n  type,\n  onChange,\n  value,\n  error,\n  disabled,\n  helpText,\n  secondaryLabel,\n  secondaryLabelClick,\n  onBlur,\n  plaintext,\n}) => {\n  return (\n    <CFormGroup className=\"mb-4\">\n      <CLabel htmlFor={name}>\n        {label}{' '}\n        {labelTag ? (\n          <small>\n            <code>{labelTag}</code>\n          </small>\n        ) : null}\n      </CLabel>\n      <span\n        className=\"font-weight-bold text-secondary\"\n        style={{ float: 'right', cursor: 'pointer' }}\n        onClick={() => {\n          secondaryLabelClick()\n        }}\n      >\n        {secondaryLabel}\n      </span>\n      <CInput\n        type={type}\n        id={name}\n        name={name}\n        onChange={onChange}\n        value={value}\n        placeholder={placeholder}\n        required={require ? true : false}\n        disabled={disabled}\n        onBlur={onBlur}\n        plaintext={plaintext}\n      />\n      <p className=\"small\">{helpText}</p>\n      <ErrorBody>{error}</ErrorBody>\n    </CFormGroup>\n  )\n}\n\nTextField.defaultProps = {\n  name: 'Name',\n  label: 'Label',\n  placeholder: 'Placeholder here',\n  require: false,\n  labelTag: false,\n  disabled: false,\n  helpText: '',\n  plaintext: false,\n}\n\nexport default TextField\n","import React from 'react'\n\nimport { CForm, CFormText } from '@coreui/react'\nimport isEmpty from '../validations/isEmpty'\n\nconst ErrorBody = (props) => {\n  if (isEmpty(props.children)) {\n    return <span></span>\n  }\n\n  return (\n    <>\n      <CForm>\n        <CFormText color=\"red\" style={{ color: 'red' }}>\n          {props.children}\n        </CFormText>\n      </CForm>\n    </>\n  )\n}\n\nexport default ErrorBody\n","import { CModal, CModalBody, CModalHeader, CModalTitle } from '@coreui/react'\nimport React, { useEffect, useState } from 'react'\n\nconst Modal = ({ title, showModal, onClose, size, ...props }) => {\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    setShow(true)\n  }, [showModal])\n\n  return (\n    <>\n      <CModal show={show} onClose={() => onClose(false)} size={size}>\n        <CModalHeader closeButton>\n          <CModalTitle>{title}</CModalTitle>\n        </CModalHeader>\n        <CModalBody>{props.children}</CModalBody>\n      </CModal>\n    </>\n  )\n}\n\nModal.defaultProps = {\n  size: 'lg',\n}\n\nexport default Modal\n","export default __webpack_public_path__ + \"static/media/edit.a2e87322.svg\";","export default __webpack_public_path__ + \"static/media/trash.f88bd880.svg\";","export default __webpack_public_path__ + \"static/media/settings.e5ff19e1.svg\";","export default __webpack_public_path__ + \"static/media/logs.06e7d35a.svg\";","export default __webpack_public_path__ + \"static/media/password.13eea246.svg\";","export default __webpack_public_path__ + \"static/media/profileAvatar.04508acb.svg\";","import { CButton, CCard, CCardBody, CCol, CRow, CSpinner } from '@coreui/react'\nimport React, { useEffect, useState } from 'react'\nimport toast from 'react-hot-toast'\nimport { connect } from 'react-redux'\nimport { updateUserDetails } from 'src/api/userRequests'\nimport TextField from 'src/components/TextField'\nimport isEmpty from 'src/validations/isEmpty'\nimport { updateUserDetails as updateUserDetailsState } from 'src/reducers/actions/user.actions'\n\nconst EditProfile = ({ isModal, fn, ln, em, ...props }) => {\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [email, setEmail] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    setFirstName(fn)\n    setLastName(ln)\n    setEmail(em)\n  }, [])\n\n  // Simulate the ESC key for exiting modal.\n  const simulateEscape = () => {\n    document.dispatchEvent(new KeyboardEvent('keydown', { keyCode: 27 }))\n  }\n\n  const submitPayload = (e) => {\n    e.preventDefault()\n    const payload = {}\n    if (firstName.trim() !== fn.trim()) {\n      payload.first_name = firstName\n    }\n    if (lastName.trim() !== ln.trim()) {\n      payload.last_name = lastName\n    }\n    if (email.trim() !== em.trim()) {\n      payload.email = email\n    }\n\n    if (isEmpty(payload)) {\n      toast('No changes made')\n    } else {\n      setLoading(true)\n      if (!isEmpty(props.token)) {\n        updateUserDetails(\n          new AbortController().signal,\n          props.token,\n          payload\n        ).then(({ json, response }) => {\n          if (response.ok) {\n            const { first_name, last_name, email, id } = json\n            const payload = { first_name, last_name, email, id }\n            props.updateUserDetailsState(payload)\n            simulateEscape()\n            toast.success('Updated successfully')\n          } else {\n            toast.success('Cant be updated.')\n          }\n          setLoading(false)\n        })\n      } else {\n        toast.error('Token Error')\n      }\n    }\n  }\n\n  return (\n    <CCard className={isModal ? 'px-3' : 'addpro-custom-card sm-pd mt-4'}>\n      <CCardBody>\n        <form onSubmit={submitPayload}>\n          <CRow>\n            <CCol xs=\"12\" md=\"6\">\n              <TextField\n                label=\"First Name\"\n                placeholder=\"First Name\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n                required={true}\n              />\n            </CCol>\n            <CCol xs=\"12\" md=\"6\">\n              <TextField\n                label=\"Last Name\"\n                placeholder=\"Last Name\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n                required={true}\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol>\n              <TextField\n                type=\"email\"\n                label=\"Email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required={true}\n                disabled={true}\n                plaintext={true}\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm=\"2\" md=\"2\">\n              <CButton\n                block\n                variant=\"outline\"\n                color=\"dark\"\n                type=\"button\"\n                onClick={() => simulateEscape()}\n              >\n                Cancel\n              </CButton>\n            </CCol>\n            <CCol sm=\"2\" md=\"2\">\n              <CButton block color=\"dark\" disabled={loading} type=\"submit\">\n                {loading ? <CSpinner color=\"secondary\" size=\"sm\" /> : 'Save'}\n              </CButton>\n            </CCol>\n          </CRow>\n        </form>\n      </CCardBody>\n    </CCard>\n  )\n}\n\nEditProfile.defaultProps = {\n  isModal: false,\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.user.token,\n  }\n}\nexport default connect(mapStateToProps, { updateUserDetailsState })(EditProfile)\n","export default __webpack_public_path__ + \"static/media/clock.b993e2ee.svg\";","export default __webpack_public_path__ + \"static/media/create.4c0ab963.svg\";","import { CCard, CCardBody, CCol, CRow } from '@coreui/react'\nimport React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { getUserLogs } from 'src/api/userRequests'\nimport isEmpty from 'src/validations/isEmpty'\nimport clockIcon from 'src/assets/icons/clock.svg'\nimport createIcon from 'src/assets/icons/create.svg'\nimport editIcon from 'src/assets/icons/edit.svg'\nimport trashIcon from 'src/assets/icons/trash.svg'\n\nconst Logs = (props) => {\n  const [userLogsResponse, setUserLogsResponse] = useState({})\n  const [userLogs, setUserLogs] = useState([])\n\n  const getActionIcon = (action_flag) => {\n    switch (action_flag) {\n      case 1:\n        return createIcon\n      case 2:\n        return editIcon\n      case 3:\n        return trashIcon\n      default:\n        return null\n    }\n  }\n\n  useEffect(() => {\n    if (isEmpty(props.token)) {\n      return\n    }\n    const signal = new AbortController().signal\n    getUserLogs(signal, props.token).then(({ json, response }) => {\n      if (response.ok) {\n        setUserLogsResponse({\n          count: json.count,\n          next: json.next,\n          previous: json.previous,\n        })\n        setUserLogs(json.results)\n      }\n    })\n  }, [])\n\n  return (\n    <div style={{ overflowY: 'scroll' , overflowX:'hidden'}}>\n      <CRow>\n        <CCol xs=\"12\" md=\"12\" className=\"mb-4\">\n          <h4 className=\"outside-card-title mb-4\">Logs</h4>\n          <CCard className=\"addpro-custom-card sm-pd\">\n            <CCardBody>\n              <CRow>\n                {userLogs.map((log) => {\n                  return (\n                    <CCol xs=\"12\" md=\"4\" className=\"mb-3\">\n                      <CCard\n                        key={log.id}\n                        className=\"shadow-sm m-2 p-3 bg-light\"\n                      >\n                        <p className=\"mb-1 font-weight-bold d-flex align-items-center\">\n                          <img\n                            src={getActionIcon(log.action_flag)}\n                            alt=\"Action\"\n                            height=\"17\"\n                          />\n                          <span className=\"pl-2\">{log.str_repr}</span>\n                        </p>\n                        <p className=\"m-0 d-flex align-items-center\">\n                          <img src={clockIcon} alt=\"Time\" height=\"11\" />\n                          <span className=\"pl-2\">{log.humanized_time}</span>\n                        </p>\n                      </CCard>\n                    </CCol>\n                  )\n                })}\n              </CRow>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.user.token,\n  }\n}\n\nexport default connect(mapStateToProps, null)(Logs)\n","import CIcon from '@coreui/icons-react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport React, { useState } from 'react'\nimport toast from 'react-hot-toast'\nimport { connect } from 'react-redux'\nimport { changePasswordRequest } from 'src/api/userRequests'\n\nconst ChangePassword = (props) => {\n  const [loading, setLoading] = useState(false)\n  const [passwordOne, setPasswordOne] = useState('')\n  const [passwordTwo, setPasswordTwo] = useState('')\n\n  // Simulate the ESC key for exiting modal.\n  const simulateEscape = () => {\n    document.dispatchEvent(new KeyboardEvent('keydown', { keyCode: 27 }))\n  }\n\n  const submitPayload = (e) => {\n    e.preventDefault()\n    setLoading(true)\n    changePasswordRequest(new AbortController().signal, {\n      new_password1: passwordOne,\n      new_password2: passwordTwo,\n    }).then(({ json, response }) => {\n      setLoading(false)\n      if (response.ok) {\n        simulateEscape()\n        toast.success('Password changed successfully.')\n      } else {\n        for (const key in json) {\n          const errors = json[key]\n          errors.forEach((err) => {\n            toast.error(err)\n          })\n        }\n      }\n    })\n  }\n\n  return (\n    <CCard\n      className=\"d-flex align-items-center\"\n      style={{\n        backgroundColor: 'white',\n      }}\n    >\n      <CCardBody\n        style={{\n          width: '40rem',\n        }}\n      >\n        <form onSubmit={submitPayload}>\n          <CInputGroup className=\"mb-4\">\n            <CInputGroupPrepend>\n              <CInputGroupText>\n                <CIcon name=\"cil-lock-locked\" />\n              </CInputGroupText>\n            </CInputGroupPrepend>\n            <CInput\n              type=\"password\"\n              placeholder=\"Password\"\n              required={true}\n              value={passwordOne}\n              onChange={(e) => setPasswordOne(e.target.value)}\n            />\n          </CInputGroup>\n          <CInputGroup className=\"mb-4\">\n            <CInputGroupPrepend>\n              <CInputGroupText>\n                <CIcon name=\"cil-lock-locked\" />\n              </CInputGroupText>\n            </CInputGroupPrepend>\n            <CInput\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              required={true}\n              value={passwordTwo}\n              onChange={(e) => setPasswordTwo(e.target.value)}\n            />\n          </CInputGroup>\n\n          <CRow>\n            <CCol xs=\"6\">\n              <CButton\n                color=\"primary\"\n                className=\"px-4\"\n                type=\"submit\"\n                disabled={loading}\n              >\n                {loading ? (\n                  <CSpinner color=\"secondary\" size=\"sm\" />\n                ) : (\n                  'Update Password'\n                )}\n              </CButton>\n            </CCol>\n          </CRow>\n        </form>\n      </CCardBody>\n    </CCard>\n  )\n}\nconst mapStateToProps = (state) => {\n  return {}\n}\n\nexport default connect(mapStateToProps, {})(ChangePassword)\n","import { CCard, CCardBody, CCol, CRow } from '@coreui/react'\nimport React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport settingsIcon from 'src/assets/icons/settings.svg'\nimport logsIcon from 'src/assets/icons/logs.svg'\nimport passwordIcon from 'src/assets/icons/password.svg'\nimport userAvatarImage from 'src/assets/images/profileAvatar.svg'\nimport Modal from 'src/components/Modal'\nimport EditProfile from './EditProfile'\nimport Logs from './Logs'\nimport ChangePassword from './ChangePassword'\n\nconst ProfileHeader = ({ firstName, lastName, email }) => {\n  const [showEditProfileModal, setShowEditProfileModal] = useState(false)\n  const [showLogsModal, setShowLogsModal] = useState(false)\n  const [showChangePasswordModal, setShowChangePasswordModal] = useState(false)\n  return (\n    <div>\n      {showEditProfileModal ? (\n        <Modal\n          showModal={showEditProfileModal}\n          title=\"Edit Profile\"\n          onClose={setShowEditProfileModal}\n        >\n          <EditProfile fn={firstName} ln={lastName} em={email} isModal={true} />\n        </Modal>\n      ) : null}\n      {showLogsModal ? (\n        <Modal\n          showModal={showLogsModal}\n          title=\"Admin Logs\"\n          onClose={setShowLogsModal}\n          size=\"xl\"\n        >\n          <Logs />\n        </Modal>\n      ) : null}\n      {showChangePasswordModal ? (\n        <Modal\n          showModal={showChangePasswordModal}\n          title=\"Change Password\"\n          onClose={setShowChangePasswordModal}\n        >\n          <ChangePassword />\n        </Modal>\n      ) : null}\n      <CRow>\n        <CCol xs=\"12\" md=\"12\" className=\"mb-4\">\n          <h4 className=\"outside-card-title mb-4\">Profile</h4>\n          <CCard className=\"addpro-custom-card sm-pd\">\n            <CCardBody>\n              <div\n                className=\"d-flex flex-column align-items-end\"\n                style={{ marginBottom: '-150px' }}\n              >\n                <button\n                  className=\"mt-4 btn btn-light rounded shadow\"\n                  onClick={() => setShowEditProfileModal(true)}\n                >\n                  <img src={settingsIcon} alt=\"Settings\" height=\"25\" />\n                </button>\n                <button\n                  className=\"mt-4 btn btn-light rounded shadow\"\n                  onClick={() => setShowLogsModal(true)}\n                >\n                  <img src={logsIcon} alt=\"Settings\" height=\"25\" />\n                </button>\n                <button\n                  className=\"mt-4 btn btn-light rounded shadow\"\n                  onClick={() => setShowChangePasswordModal(true)}\n                >\n                  <img src={passwordIcon} alt=\"Settings\" height=\"25\" />\n                </button>\n              </div>\n              <div className=\"text-center\">\n                <div class=\"avatar mb-4\">\n                  <img\n                    class=\"avatar-img\"\n                    src={userAvatarImage}\n                    alt=\"user@email.com\"\n                    height=\"100\"\n                    title=\"This is an auto-generated static image.\"\n                  />\n                </div>\n                <p className=\"h4 font-weight-bold\">{`${firstName} ${lastName}`}</p>\n                <p className=\"h6\">{email}</p>\n              </div>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </div>\n  )\n}\n\nProfileHeader.defaultProps = {\n  firstName: 'Loading',\n  lastName: '...',\n  email: 'weareloading@pr.com',\n}\n\nexport default connect(null, {})(ProfileHeader)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { getUserDetails } from 'src/api/userRequests'\nimport { setLoader } from 'src/reducers/actions/settings.actions'\nimport { updateUserDetails } from 'src/reducers/actions/user.actions'\nimport isEmpty from 'src/validations/isEmpty'\nimport ProfileHeader from './ProfileHeader'\n\nconst Profile = (props) => {\n  useEffect(() => {\n    props.setLoader(true)\n    if (isEmpty(props.token)) {\n      return\n    }\n    const controller = new AbortController()\n    const signal = controller.signal\n    getUserDetails(signal, props.token).then(({ json, response }) => {\n      if (response.ok) {\n        const { first_name, last_name, email, id } = json\n        const payload = { first_name, last_name, email, id }\n        props.updateUserDetails(payload)\n        props.setLoader(false)\n      }\n    })\n  }, [])\n  return (\n    <>\n      <ProfileHeader\n        firstName={props.first_name}\n        lastName={props.last_name}\n        email={props.email}\n      />\n    </>\n  )\n}\nconst mapStateToProps = (state) => {\n  return {\n    token: state.user.token,\n    email: state.user.email,\n    first_name: state.user.first_name,\n    last_name: state.user.last_name,\n  }\n}\n\nexport default connect(mapStateToProps, { setLoader, updateUserDetails })(\n  Profile\n)\n"],"sourceRoot":""}